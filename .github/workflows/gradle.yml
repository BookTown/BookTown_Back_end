name: Java CI with Gradle

on:
  pull_request:
    branches: [master, develop] # PR 발생시
  push:
    branches:
      - develop             # develop 브랜치 푸시 시
      - feat/**             # feat/** 브랜치 푸시 시

permissions:
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # 1) 체크아웃
      - uses: actions/checkout@v3

      # 2) JDK 설치
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      # 3) Gradle Caching // 빌드 시간 단축
      - name: Gradle Caching
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      # 4) gradlew에 실행 권한 부여
      - name: Make gradlew executable
        run: chmod +x gradlew

      # 5) Gradle 사용
      # Spring Boot Build
      - name: Spring Boot Build
        run: ./gradlew clean build -x test
      
      # 5 EC2 서버로 배포 
      - name: Deploy to EC2
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_KEY }}
          source: "build/libs/*.jar"
          target: "/home/ec2-user/app"

      # 6 EC2에서 Spring Boot 실행
      - name: Restart Backend on EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{secrets.EC2_HOST}}
          username: ${{secrets.EC2_USER}}
          key: ${{secrets.EC2_KEY}}
          script: |
            # 실행 중인 Spring Boot 종료
            sudo fuser -k 8080/tcp || true
            
            # 새로운 Spring Boot 실행
            nohup java -jar /home/ec2-user/app/*.jar --server.port=8080 > /dev/null 2>&1 &
