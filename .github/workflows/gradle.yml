name: Java CI with Gradle & Docker

on:
  pull_request:
    branches: [master, develop] # PR 발생시
  push:
    branches:
      - develop
      - feat/**

permissions:
  contents: read
  packages: write

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # 1) GitHub Repo Checkout
      - uses: actions/checkout@v3

      # 2) JDK 17 설치
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      # 3) Gradle 캐싱 (빌드 속도 최적화)
      - name: Gradle Caching
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      # 4) gradlew 실행 권한 부여
      - name: Make gradlew executable
        run: chmod +x gradlew

      # 5) Gradle 빌드 (테스트 제외)
      - name: Build with Gradle
        run: ./gradlew clean build -x test

      # 6) Docker 로그인 (Docker Hub 사용)
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_NAME }}
          password: ${{ secrets.DOCKER_ACCESS_TOKEN }}

      # 7) Docker 이미지 빌드 및 태깅
      - name: Build Docker Image
        run: |
          docker build -t ${{ secrets.DOCKER_NAME }}/booktown-backend:latest .

      # 8) Docker Hub에 이미지 푸시
      - name: Push Docker Image to Docker Hub
        run: |
          docker push ${{ secrets.DOCKER_NAME }}/booktown-backend:latest

      # 9) EC2 서버에서 컨테이너 실행
      - name: Deploy to EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_KEY }}
          script: |
            # 기존 컨테이너 중지 및 삭제
            docker stop booktown-backend || true
            docker rm booktown-backend || true
            
            # 최신 이미지 가져오기
            docker pull ${{ secrets.DOCKER_NAME }}/booktown-backend:latest
            
            # 새 컨테이너 실행
            docker run -d --name booktown-backend -p 8080:8080 \
              -e SPRING_PROFILES_ACTIVE=prod \
              ${{ secrets.DOCKER_NAME }}/booktown-backend:latest
